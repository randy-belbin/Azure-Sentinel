id: cecdbd4c-4902-403c-8d4b-32eb1efe460b
name: Solorigate Network Beacon  
description: | 
  'Identifies a match across various data feeds for domains IOCs related to the Solorigate incident.
   References: https://blogs.microsoft.com/on-the-issues/2020/12/13/customers-protect-nation-state-cyberattacks/, 
   https://www.fireeye.com/blog/threat-research/2020/12/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html?1'
severity: High
status: Available
requiredDataConnectors: 
  - connectorId: DNS
    dataTypes:
      - DnsEvents
  - connectorId: AzureMonitor(VMInsights)  
    dataTypes: 
      - VMConnection 
  - connectorId: CiscoASA 
    dataTypes: 
      - CommonSecurityLog 
  - connectorId: PaloAltoNetworks 
    dataTypes: 
      - CommonSecurityLog 
  - connectorId: MicrosoftThreatProtection 
    dataTypes: 
      - DeviceNetworkEvents
  - connectorId: AzureFirewall
    dataTypes: 
      - AzureDiagnostics
      - AZFWApplicationRule
      - AZFWDnsQuery
  - connectorId: Zscaler
    dataTypes:
      - CommonSecurityLog
  - connectorId: InfobloxNIOS
    dataTypes: 
      - Syslog
  - connectorId: GCPDNSDataConnector
    dataTypes: 
      - GCP_DNS_CL
  - connectorId: NXLogDnsLogs
    dataTypes: 
      - NXLog_DNS_Server_CL
  - connectorId: CiscoUmbrellaDataConnector
    dataTypes: 
      - Cisco_Umbrella_dns_CL
  - connectorId: Corelight
    dataTypes: 
      - Corelight_CL

queryFrequency: 6h 
queryPeriod: 6h 
triggerOperator: gt 
triggerThreshold: 0 
tactics: 
  - CommandAndControl 
relevantTechniques:
  - T1102
tags:
  - Solorigate
  - NOBELIUM
  - Schema: ASIMDns
    SchemaVersion: 0.1.1
query:  |  
  let domains = dynamic(["incomeupdate.com","zupertech.com","databasegalore.com","panhardware.com","avsvmcloud.com","digitalcollege.org","freescanonline.com","deftsecurity.com","thedoccloud.com","virtualdataserver.com","lcomputers.com","webcodez.com","globalnetworkissues.com","kubecloud.com","seobundlekit.com","solartrackingsystem.net","virtualwebdata.com"]);
  (union isfuzzy=true
  (CommonSecurityLog 
    | parse Message with * '(' DNSName ')' * 
    | where DNSName in~ (domains) or DestinationHostName has_any (domains) or RequestURL has_any(domains)
    | extend AccountCustomEntity = SourceUserID, HostCustomEntity = DeviceName, IPCustomEntity = SourceIP
    ),
  (_Im_Dns (domain_has_any=domains)
    | extend DNSName = DnsQuery
    | extend IPCustomEntity = SrcIpAddr
    ),
  (VMConnection 
    | parse RemoteDnsCanonicalNames with * '["' DNSName '"]' *
    | where isnotempty(DNSName)
    | where DNSName in~ (domains)
    | extend IPCustomEntity = RemoteIp
    ),
  (DeviceNetworkEvents 
    | where isnotempty(RemoteUrl) 
    | where RemoteUrl  has_any (domains)  
    | extend DNSName = RemoteUrl
    | extend IPCustomEntity = RemoteIP 
    | extend HostCustomEntity = DeviceName 
    ),
  (AzureDiagnostics 
    | where ResourceType == "AZUREFIREWALLS"
    | where Category == "AzureFirewallApplicationRule"
    | parse msg_s with Protocol 'request from ' SourceHost ':' SourcePort 'to ' DestinationHost ':' DestinationPort '. Action:' Action
    | where isnotempty(DestinationHost)
    | where DestinationHost has_any (domains)  
    | extend DNSName = DestinationHost 
    | extend IPCustomEntity = SourceHost
    ),
  (AzureDiagnostics
    | where ResourceType == "AZUREFIREWALLS"
    | where Category == "AzureFirewallNetworkRule"
    | where msg_s has_any (domains)
    | parse msg_s with Protocol " request from " SourceIP ":" SourcePortInt:int " to " TargetIP ":" TargetPortInt:int *
    | parse kind=regex flags=U msg_s with * ". Action\\: " Action1a "\\."
    | parse msg_s with * ". Policy: " Policy ". Rule Collection Group: " RuleCollectionGroup "." *
    | parse msg_s with * " Rule Collection: "  RuleCollection ". Rule: " Rule 
    | extend DNSName = TargetIP 
    | extend IPCustomEntity = SourceIP
    ),
  (AzureDiagnostics
    | where ResourceType == "AZUREFIREWALLS"
    | where Category == "AzureFirewallDnsProxy"
    | where msg_s has_any (domains)
    | parse msg_s with "DNS Request: " SourceIP ":" SourcePortInt:int " - " QueryID:int " " RequestType " " RequestClass " " hostname ". " protocol " " details
    | extend
        ResponseDuration = extract("[0-9]*.?[0-9]+s$", 0, msg_s),
        SourcePort = tostring(SourcePortInt),
        QueryID =  tostring(QueryID)
    | extend DNSName = hostname
    | extend IPCustomEntity = SourceIP
    | project TimeGenerated,SourceIP,hostname,RequestType,ResponseDuration,details,msg_s
    | order by TimeGenerated
    ),
  (AZFWApplicationRule
    | where Fqdn has_any (domains)
    | extend DNSName = Fqdn
    | extend IPCustomEntity = SourceIp
    ),
  (AZFWDnsQuery
    | where isnotempty(QueryName)
    | where QueryName has_any (domains)
    | extend DNSName = QueryName
    | extend IPCustomEntity = SourceIp
    )
    )
entityMappings:
  - entityType: Account
    fieldMappings:
      - identifier: FullName
        columnName: AccountCustomEntity
  - entityType: Host
    fieldMappings:
      - identifier: FullName
        columnName: HostCustomEntity
  - entityType: IP
    fieldMappings:
      - identifier: Address
        columnName: IPCustomEntity 
  - entityType: DNS
    fieldMappings:
      - identifier: DomainName
        columnName: DNSName
version: 1.5.1
kind: Scheduled
